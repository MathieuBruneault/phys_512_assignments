import numpy as np
from matplotlib import pyplot as plt
import h5py
import glob
import matplotlib.mlab as mlab
from scipy.ndimage import gaussian_filter

def read_template(filename):
    dataFile=h5py.File(filename,'r')
    template=dataFile['template']
    th=template[0]
    tl=template[1]
    return th,tl

def read_file(filename):
    dataFile=h5py.File(filename,'r')
    dqInfo = dataFile['quality']['simple']
    qmask=dqInfo['DQmask'][...]
    meta=dataFile['meta']
    gpsStart=meta['GPSstart'][()]
    utc=meta['UTCstart'][()]
    duration=meta['Duration'][()]
    strain=dataFile['strain']['Strain'][()]
    dt=(1.0*duration)/len(strain)
    dataFile.close()
    return strain,dt,utc

def noise_model(fname):
    strain,dt,utc=read_file(fname)
    x=np.arange(len(strain))
    x=x-1.0*x.mean()
    window=0.5*(1+np.cos(x*np.pi/np.max(x)))
    windowed_strain=window*strain
    normfac=np.sqrt(np.mean(window**2))
    power_spectrum=np.abs(np.fft.rfft(windowed_strain)/normfac)**2
    power_spectrum=gaussian_filter(power_spectrum,3)
    return power_spectrum

def find_wave(fname_H, fname_L, template_name):
    strain_H,dt,utc=read_file(fname_H)
    strain_L,dt,utc=read_file(fname_L)
    template_H,template_L=read_template(template_name)
    noise_H=noise_model(fname_H)
    noise_L=noise_model(fname_L)
    x=np.arange(len(strain_H))
    x=x-1.0*x.mean()
    window=0.5*(1+np.cos(x*np.pi/np.max(x)))
    normfac=np.sqrt(np.mean(window**2))
    whitened_A_H=np.fft.rfft(window*template_H)/(np.sqrt(noise_H)*normfac)
    whitened_A_L=np.fft.rfft(window*template_L)/(np.sqrt(noise_L)*normfac)
    whitened_d_H=np.fft.rfft(window*strain_H)/(np.sqrt(noise_H)*normfac)
    whitened_d_L=np.fft.rfft(window*strain_L)/(np.sqrt(noise_L)*normfac)
    m_H=np.fft.fftshift(np.fft.irfft(np.conj(whitened_A_H)*whitened_d_H))
    m_L=np.fft.fftshift(np.fft.irfft(np.conj(whitened_A_L)*whitened_d_L))
    SNR_H=np.abs(m_H*np.fft.fftshift(np.fft.irfft(np.sqrt(np.conj(whitened_A_H)*whitened_A_H))))
    SNR_L=np.abs(m_H*np.fft.fftshift(np.fft.irfft(np.sqrt(np.conj(whitened_A_L)*whitened_A_L))))
    plt.figure()
    plt.plot(SNR_L)
    plt.show()



fname_H='LOSC_Event_tutorial/H-H1_LOSC_4_V2-1126259446-32.hdf5'
fname_L='LOSC_Event_tutorial/L-L1_LOSC_4_V2-1126259446-32.hdf5'
template_name='LOSC_Event_tutorial/GW150914_4_template.hdf5'
find_wave(fname_H, fname_L, template_name)






































































































































































































































































































































































































































































































































































































































































































































































































































































